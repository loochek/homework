Opcode is 1 byte
Arithmetics (operations, in/out, %d) - 4-byte signed fixed-point number, 3 decimal digits after point (a.k.a Number)
rax, rbx, rcx, rdx - 4-byte registers
If the instruction takes two operands from the stack, then the one that is deeper is considered the first

OPCODE  MNEMONIC   DESCRIPTION                                                     ARGUMENTS             SIZE
00      nop        No operation                                                                          1
01      push rax   Push value from rax into stack                                                        1
02      push rbx   Push value from rbx into stack                                                        1
03      push rcx   Push value from rcx into stack                                                        1
04      push rdx   Push value from rdx into stack                                                        1
05      push %d    Push immediate Number into stack                                4-byte Number         5
06      pop  rax   Pop  value from stack into register rax                                               1
07      pop  rbx   Pop  value from stack into register rbx                                               1
08      pop  rcx   Pop  value from stack into register rcx                                               1
09      pop  rdx   Pop  value from stack into register rdx                                               1
0A      in         Push Number from keyboard into stack                                                  1
0B      out        Pop Number from stackand print it                                                     1
0C      add        Add two Numbers from stack and push result into Stack                                 1
0D      sub        Substract two Numbers from stack and push result into Stack                           1
0E      mul        Multiple two Numbers from stack and push result into Stack                            1
0F      div        Divide two Numbers from stack and push result into Stack                              1
10      hlt        Stop execution                                                                        1
11      jmp  %d    Set instruction pointer to immediate offset                     4-byte integer        5
12      je   %d    jmp if first operand == second operand from stack, else nop     4-byte integer        5
13      jne  %d    jmp if first operand != second operand from stack, else nop     4-byte integer        5
14      jg   %d    jmp if first operand >  second operand from stack, else nop     4-byte integer        5
15      jge  %d    jmp if first operand >= second operand from stack, else nop     4-byte integer        5
16      jl   %d    jmp if first operand <  second operand from stack, else nop     4-byte integer        5
17      jle  %d    jmp if first operand <= second operand from stack, else nop     4-byte integer        5